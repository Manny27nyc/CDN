From 3d50c9cdfdd95437fb7b2b67f539487eb4585143 Mon Sep 17 00:00:00 2001
From: Zhizhen Tang <zhizhen.tang@intel.com>
Date: Wed, 19 Jun 2019 15:46:00 +0800
Subject: [PATCH] Enable mp4 and mkv/webm container support on SVT-AV1

Signed-off-by: Zhizhen Tang <zhizhen.tang@intel.com>
---
 Source/API/EbSvtAv1Enc.h                      |  7 +++
 Source/Lib/Common/Codec/EbPictureControlSet.h |  1 +
 Source/Lib/Encoder/Codec/EbEncHandle.c        | 62 ++++++++++++++++++++++++---
 3 files changed, 65 insertions(+), 5 deletions(-)

diff --git a/Source/API/EbSvtAv1Enc.h b/Source/API/EbSvtAv1Enc.h
index e71193a..1bc242f 100644
--- a/Source/API/EbSvtAv1Enc.h
+++ b/Source/API/EbSvtAv1Enc.h
@@ -464,6 +464,13 @@ typedef struct EbSvtAv1EncConfiguration
         EbComponentType           *svt_enc_component,
         EbBufferHeaderType       **output_stream_ptr);
 
+    /* OPTIONAL: Release stream headers at init time.
+     *
+     * Parameter:
+     * @ *stream_header_ptr  stream header buffer. */
+    EB_API EbErrorType eb_svt_release_enc_stream_header(
+        EbBufferHeaderType        *stream_header_ptr);
+
     /* OPTIONAL: Get the end of sequence Network Abstraction Layer.
      *
      * Parameter:
diff --git a/Source/Lib/Common/Codec/EbPictureControlSet.h b/Source/Lib/Common/Codec/EbPictureControlSet.h
index a386721..82412b7 100644
--- a/Source/Lib/Common/Codec/EbPictureControlSet.h
+++ b/Source/Lib/Common/Codec/EbPictureControlSet.h
@@ -39,6 +39,7 @@ extern "C" {
 
 #define SEGMENT_ENTROPY_BUFFER_SIZE         40000000 // Entropy Bitstream Buffer Size
 #define PACKETIZATION_PROCESS_BUFFER_SIZE SEGMENT_ENTROPY_BUFFER_SIZE
+#define PACKETIZATION_PROCESS_SPS_BUFFER_SIZE 2000
 #define HISTOGRAM_NUMBER_OF_BINS            256
 #define MAX_NUMBER_OF_REGIONS_IN_WIDTH      4
 #define MAX_NUMBER_OF_REGIONS_IN_HEIGHT     4
diff --git a/Source/Lib/Encoder/Codec/EbEncHandle.c b/Source/Lib/Encoder/Codec/EbEncHandle.c
index aa307bf..c3c76a7 100644
--- a/Source/Lib/Encoder/Codec/EbEncHandle.c
+++ b/Source/Lib/Encoder/Codec/EbEncHandle.c
@@ -3160,14 +3160,66 @@ __attribute__((visibility("default")))
 #endif
 EB_API EbErrorType eb_svt_enc_stream_header(
     EbComponentType           *svt_enc_component,
-    EbBufferHeaderType        **output_stream_ptr){
+    EbBufferHeaderType        **output_stream_ptr)
+{
+    EbErrorType              return_error = EB_ErrorNone;
+    EbEncHandle             *pEncCompData  = (EbEncHandle*)svt_enc_component->p_component_private;
+    SequenceControlSet      *sequenceControlSetPtr = pEncCompData->sequence_control_set_instance_array[0]->sequence_control_set_ptr;
+    Bitstream                bitstream;
+    OutputBitstreamUnit      output_bitstream;
+    EbBufferHeaderType      *outputStreamBuffer;
+
+    memset(&bitstream, 0, sizeof(Bitstream));
+    memset(&output_bitstream, 0, sizeof(OutputBitstreamUnit));
+    bitstream.output_bitstream_ptr = &output_bitstream;
+
+    outputStreamBuffer = (EbBufferHeaderType *)malloc(sizeof(EbBufferHeaderType));
+    if (!outputStreamBuffer) {
+        return EB_ErrorInsufficientResources;
+    }
+
+    outputStreamBuffer->p_buffer = (uint8_t *)malloc(sizeof(uint8_t) * PACKETIZATION_PROCESS_BUFFER_SIZE);
+    if (!outputStreamBuffer->p_buffer) {
+        free(outputStreamBuffer);
+        return EB_ErrorInsufficientResources;
+    }
+
+    outputStreamBuffer->size = sizeof(EbBufferHeaderType);
+    outputStreamBuffer->n_alloc_len = PACKETIZATION_PROCESS_BUFFER_SIZE;
+    outputStreamBuffer->p_app_private = NULL;
+    outputStreamBuffer->pic_type = EB_AV1_INVALID_PICTURE;
+    outputStreamBuffer->n_filled_len = 0;
+
+    ((OutputBitstreamUnit *)bitstream.output_bitstream_ptr)->buffer_begin_av1 = outputStreamBuffer->p_buffer;
+
+    output_bitstream_reset(bitstream.output_bitstream_ptr);
+
+    // Code the SPS
+    encode_sps_av1(&bitstream, sequenceControlSetPtr);
+
+    outputStreamBuffer->n_filled_len = (uint32_t)(((OutputBitstreamUnit *)bitstream.output_bitstream_ptr)->buffer_av1 - ((OutputBitstreamUnit *)bitstream.output_bitstream_ptr)->buffer_begin_av1);
+
+    *output_stream_ptr = outputStreamBuffer;
+
+    return return_error;
+}
+#if defined(__linux__) || defined(__APPLE__)
+__attribute__((visibility("default")))
+#endif
+EB_API EbErrorType eb_svt_release_enc_stream_header(
+    EbBufferHeaderType        *stream_header_ptr)
+{
+    EbErrorType           return_error = EB_ErrorNone;
+
+    if (!stream_header_ptr || !(stream_header_ptr->p_buffer)) {
+        return EB_ErrorBadParameter;
+    }
+
+    free(stream_header_ptr->p_buffer);
+    free(stream_header_ptr);
 
-    EbErrorType             return_error = EB_ErrorNone;
-    UNUSED(svt_enc_component);
-    UNUSED(output_stream_ptr);
     return return_error;
 }
-//
 #if defined(__linux__) || defined(__APPLE__)
 __attribute__((visibility("default")))
 #endif
-- 
2.7.4

